---
# MySQL dump from one server onto another
#
# Inputs:
#   remote_server:
#   remote_server_ssh_user:
#   remote_server_mysql_user:
#   remote_server_mysql_pass:
#   dump_database: the database to dump
#   target_server
#   target_server_path


#
# Put meza-ansible's private key and known_hosts on server within /root
#
- name: "Grant keys to {{ target_server }}"
  include_role:
    name: key-transfer
    tasks_from: grant-keys
  vars:
    granted_server: "{{ target_server }}"
  when:
    target_server != remote_server

#
# SET user option like `-u MYUSER` if desired
#
- name: Set mysql user option if defined
  set_fact:
    user_option: "-u {{ remote_server_mysql_user }}"
  when: remote_server_mysql_user is defined
- name: Set mysql user option to empty string if not defined
  set_fact:
    user_option: ""
  when: remote_server_mysql_user is not defined

#
# SET password option like `-pMYPASSWORD` if desired
#
- name: Set mysql password option if defined
  set_fact:
    password_option: "-p{{ remote_server_mysql_pass }}"
  when: remote_server_mysql_pass is defined
- name: Set mysql password option to empty string if not defined
  set_fact:
    password_option: ""
  when: remote_server_mysql_pass is not defined

#
# DO mysqldump
#
# FIXME: Remove StrictHostKeyChecking=no when tests properly add host keys (users should do so, too, of course)
- name: "Perform MySQL dump from {{ remote_server }} to {{ target_server }}"
  shell: >
    ssh
    -o StrictHostKeyChecking=no
    -i /root/meza-ansible-id_rsa
    -o UserKnownHostsFile=/root/meza-ansible-known_hosts
    {{ remote_server_ssh_user }}@{{ remote_server }}
    "mysqldump
    {{ user_option }}
    {{ password_option }}
    {{ dump_database }}
    | gzip -c"
    | gunzip > {{ target_server_path }}

- name: "Revoke keys from {{ target_server }}"
  include_role:
    name: key-transfer
    tasks_from: revoke-keys
  vars:
    granted_server: "{{ target_server }}"
