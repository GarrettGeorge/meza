---
#
# Things that need to be done just once:
#   1. Create database if not exists
#      - If present, do nothing
#      - If possible, use SQL files from controller: backups/WIKI-ID
#      - else: just use MediaWiki tables.sql
#
# Things that need to be done on all app servers:
#   2. Make sure htdocs/wikis/WIKI-ID/config symlinks to local/wikis/WIKI-ID
#   3. Make sure htdocs/wikis/WIKI-ID/images exists
#      - if possible: get from controller: backups/WIKI-ID/images
#      - else: just create dir
#      - eventually need method to force-rsync from backup


- name: Ensure localization cache directory exists for this wiki
  file:
    state: directory
    path: "{{ m_cache_directory }}/{{ wiki_id }}"
    owner: "{{ m_cache_directory_owner }}"
    group: "{{ m_cache_directory_group }}"
    mode: "{{ m_cache_directory_mode }}"



# Check if databases starting with "wiki_" exist
#   if database exists: wiki_database.rc == 0
#   if no database:  wiki_database.rc == 1
- name: "{{ wiki_id }} - check if wiki database exists"
  shell: 'mysqlshow "wiki_{{ wiki_id }}" | grep -v Wildcard | grep -o wiki_{{ wiki_id }}'
  register: wiki_exists_check
  delegate_to: "{{ groups['db-master'][0] }}"
  ignore_errors: yes
  run_once: true

- name: "{{ wiki_id }} - Set fact if database wiki_{{ wiki_id }} DOES exist"
  set_fact:
    wiki_exists: True
  when: wiki_exists_check is defined and wiki_exists_check.rc == 0

- name: "{{ wiki_id }} - Set fact if database wiki_{{ wiki_id }} DOES NOT exist"
  set_fact:
    wiki_exists: False
  when: wiki_exists_check is defined and wiki_exists_check.rc != 0



#
# Set facts to clarify if overwriting data is INITIALLY INTENDED (regardless of
#  whether later checks make it possible)
#
- name: "{{ wiki_id }} - Set fact if INTEND overwrite data"
  set_fact:
    intend_overwrite_from_backup: True
  when: force_overwrite_from_backup is defined and force_overwrite_from_backup == true

- name: "{{ wiki_id }} - Set fact if NOT INTEND overwrite data"
  set_fact:
    intend_overwrite_from_backup: False
  when: force_overwrite_from_backup is not defined or force_overwrite_from_backup == false

- name: "{{ wiki_id }} - Mark sql_backup_server_set as NOT SET yet"
  set_fact:
    sql_backup_server_set: False

- name: "{{ wiki_id }} - Set SQL source-from-backup facts IF SOURCING FROM db-src"
  set_fact:
    sql_backup_server: "{{ backups_server_db_dump.addr }}"
    do_sql_dump: True
    sql_file_match: "wiki_{{ wiki_id }}.sql"
    db_backup_server_remote_user: "{{ backups_server_db_dump.remote_user }}"
    sql_backup_server_set: True
  when: "backups_server_db_dump is defined"

- name: "{{ wiki_id }} - Set SQL source-from-backup facts IF SOURCING FROM backup-src"
  set_fact:
    sql_backup_server: "{{ backups_server_alt_source.addr }}"
    do_sql_dump: False
    sql_dir_path: "{{ backups_server_alt_source.sql_dir_path | regex_replace('<id>', wiki_id) }}"
    sql_file_match: "{{ backups_server_alt_source.sql_file_match | default('*.sql') | regex_replace('<id>', wiki_id) }}"
    db_backup_server_remote_user: "{{ backups_server_alt_source.remote_user }}"
    sql_backup_server_set: True
  when: "not sql_backup_server_set and backups_server_alt_source is defined"

- name: "{{ wiki_id }} - Set SQL source-from-backup facts IF SOURCING FROM backup-servers"
  set_fact:
    sql_backup_server: "{{ groups['backup-servers'][0] }}"
    do_sql_dump: False
    sql_dir_path: "{{ m_backups }}/{{ env }}/{{ wiki_id }}"
    sql_file_match: "*.sql"
    sql_backup_server_set: True
  when: "not sql_backup_server_set and 'backup-servers' in groups and groups['backup-servers']|length|int > 0"



#
# Set remote user to access database backup
#
- name: "{{ wiki_id }} - Set fact for database backup server remote user TO DEFAULT meza-ansible"
  set_fact:
    db_backup_server_remote_user: "meza-ansible"
  when:
    db_backup_server_remote_user is not defined


# WHEN: do_sql_dump is True
# Get home directory for {{db_backup_server_remote_user}}@{{sql_backup_server}}
- name: "Get {{ db_backup_server_remote_user }} home directory on {{ sql_backup_server }}"
  shell: "getent passwd '{{ db_backup_server_remote_user }}' | cut -d: -f6"
  register: remote_user_home_dir
  delegate_to: "{{ sql_backup_server }}"
  remote_user: "{{ db_backup_server_remote_user }}"
  run_once: true
  when: do_sql_dump

- name: how does fact-setting work when register was run_once
  debug:
    var: remote_user_home_dir

- name: "Set remote_user_home_dir fact"
  set_fact:
    remote_user_home_dir: "{{ remote_user_home_dir.stdout }}"
  when: do_sql_dump

- name: "{{ wiki_id }} - If doing a SQL dump, need to set path to SQL file based on remote user"
  set_fact:
    sql_dir_path: "{{ remote_user_home_dir }}"
  when: do_sql_dump



#
# Check for backups directory
#
- name: "{{ wiki_id }} - Check if backups dir exists"
  stat:
    path: "{{ sql_dir_path }}"
  register: backups_dir_stat
  delegate_to: "{{ sql_backup_server }}"
  remote_user: "{{ db_backup_server_remote_user }}"
  run_once: true

- name: "{{ wiki_id }} - Set fact if backups server DOES have {{ sql_dir_path }}"
  set_fact:
    backup_dir_exists: True
  when: backups_dir_stat.stat.exists == true

- name: "{{ wiki_id }} - Set fact if backups server DOES NOT have {{ sql_dir_path }}"
  set_fact:
    backup_dir_exists: False
  when: backups_dir_stat.stat.exists == false



#
# Dump SQL if required
#
- name: "{{ wiki_id }} - Dump SQL file from db-src"
  mysql_db:
    state: dump
    name: "wiki_{{ wiki_id }}"
    target: "{{ sql_dir_path }}/{{ sql_file_match }}"
    # FIXME: Security issue?
    login_user: "{{ backups_server_db_dump.mysql_user }}"
    login_password: "{{ backups_server_db_dump.mysql_pass }}"
  delegate_to: "{{ sql_backup_server }}"
  remote_user: "{{ db_backup_server_remote_user }}"
  run_once: true
  when: do_sql_dump and (not wiki_exists or intend_overwrite_from_backup)



# This will find the latest sql file by name, or wiki.sql over any timestamped one
# assuming timestamp-named files like 20170220000002_wiki.sql
- name: "{{ wiki_id }} - Find SQL file if it exists"
  shell: 'find {{ sql_dir_path }} -maxdepth 1 -type f -iname "{{ sql_file_match }}" | sort -r | head -n +1'
  register: wiki_sql_file
  delegate_to: "{{ sql_backup_server }}"
  run_once: true
  remote_user: "{{ db_backup_server_remote_user }}"
  ignore_errors: yes
  when: backup_dir_exists and (not wiki_exists or intend_overwrite_from_backup)

- name: "{{ wiki_id }} - Set fact if SQL file DOES exist"
  set_fact:
    sql_file_exists: True
  when: wiki_sql_file is defined and wiki_sql_file.rc is defined and wiki_sql_file.rc == 0

- name: "{{ wiki_id }} - Set fact if SQL file DOES NOT exist"
  set_fact:
    sql_file_exists: False
  when: wiki_sql_file is not defined or wiki_sql_file.rc is not defined or wiki_sql_file.rc != 0



#
# Set facts to clarify if overwriting data should actually occur
#
- name: "{{ wiki_id }} - Set fact if SHOULD overwrite data (only possible if backup exists)"
  set_fact:
    do_overwrite_db_from_backup: True
  when: intend_overwrite_from_backup and sql_file_exists

- name: "{{ wiki_id }} - Set fact if SHOULD NOT overwrite data"
  set_fact:
    do_overwrite_db_from_backup: False
  when: not intend_overwrite_from_backup or not sql_file_exists



  #
  # Since backup-servers[0], master-db[0] and controller (localhost) are three
  # different servers, and the current Ansible play is being run against app-
  # servers, there's no way to send from backup-servers[0] to master-db[0]
  # directly. Instead, pass to controller, then form controller to master-db
  #
- name: "{{ wiki_id }} - if wiki_sql_file exists, FIRST remove preexisting SQL file from controller"
  file:
    path: "{{ m_tmp }}/controller-wiki.sql"
    state: absent
  run_once: true
  delegate_to: localhost
  when: sql_file_exists

- name: "{{ wiki_id }} - if wiki_sql_file exists, NEXT send SQL file to controller"
  fetch:
    src: "{{ wiki_sql_file.stdout }}"
    dest: "{{ m_tmp }}/controller-wiki.sql"
    fail_on_missing: yes
    flat: yes
  # note: don't run fetch with become on large files. ref bottom of this page:
  # http://docs.ansible.com/ansible/fetch_module.html
  become: no
  run_once: true
  delegate_to: "{{ sql_backup_server }}"
  remote_user: "{{ db_backup_server_remote_user }}"
  when: sql_file_exists

- name: "{{ wiki_id }} - if wiki_sql_file exists, NEXT send file from controller to master-db"
  copy:
    src: "{{ m_tmp }}/controller-wiki.sql"
    dest: "{{ m_tmp }}/wiki.sql"
    force: yes
  run_once: true
  delegate_to: "{{ groups['db-master'][0] }}"
  when: sql_file_exists

- name: "{{ wiki_id }} - If SQL was dumped from db-src, remove file now that it's on db-master"
  file:
    state: absent
    path: "{{ wiki_sql_file.stdout }}"
  delegate_to: "{{ sql_backup_server }}"
  remote_user: "{{ db_backup_server_remote_user }}"
  run_once: true
  when: do_sql_dump and sql_file_exists

- name: "{{ wiki_id }} - If wiki_sql_file NOT defined, send generic file to master db"
  copy:
    src: templates/mediawiki-tables.sql
    dest: "{{ m_tmp }}/wiki.sql"
    force: yes
  run_once: true
  delegate_to: "{{ groups['db-master'][0] }}"
  when: not sql_file_exists

- name: "{{ wiki_id }} - Drop database if --overwrite (or -o) set"
  mysql_db:
    name: "wiki_{{ wiki_id }}"
    state: absent
  run_once: true
  delegate_to: "{{ groups['db-master'][0] }}"
  when: do_overwrite_db_from_backup

- name: "{{ wiki_id }} - Import SQL file"
  mysql_db:
    name: "wiki_{{ wiki_id }}"
    state: import
    target: "{{ m_tmp }}/wiki.sql"
  run_once: true
  register: did_db_import
  delegate_to: "{{ groups['db-master'][0] }}"
  when: not wiki_exists or do_overwrite_db_from_backup

- name: Did DB import?
  debug: { var: did_db_import }

- name: Initiate wikis_to_rebuild_data if not exists
  set_fact:
    wikis_to_rebuild_data: []
  when: wikis_to_rebuild_data is not defined

- name: Add wiki to list of DB-imported wikis if required
  set_fact:
    wikis_to_rebuild_data: "{{ wikis_to_rebuild_data + [ wiki_id ] }}"
  when: did_db_import is defined and did_db_import.changed is defined and did_db_import.changed

- name: "{{ wiki_id }} - Remove SQL file from master DB"
  file:
    path: "{{ m_tmp }}/wiki.sql"
    state: absent
  run_once: true
  delegate_to: "{{ groups['db-master'][0] }}"
  when: not wiki_exists or do_overwrite_db_from_backup



#
#
# Ensure access to logo and favicon
#
#


#
# Make sure wiki's htdocs directory in place, and symlink to config. Symlink
# required so logo and favicon accessible via HTTP. Consider creating other
# method to allow HTTP access to these files (HAProxy rule? httpd rule? PHP?)
#
- name: "{{ wiki_id }} - Ensure wiki htdocs directory in place"
  file:
    path: "{{ m_htdocs }}/wikis/{{ wiki_id }}"
    state: directory
    owner: apache
    group: apache
    mode: 0755
- name: "{{ wiki_id }} - Ensure wiki config symlink in place"
  file:
    # dest = symlink, src = dir linked to
    src: "{{ m_deploy }}/public/wikis/{{ wiki_id }}"
    dest: "{{ m_htdocs }}/wikis/{{ wiki_id }}/config"
    state: link
    owner: apache
    group: apache
    mode: 0755



#
#
# Handling file uploads
#
#


# FIXME: This nees to be rectified for multiple app servers vs shared storage
#        (e.g. on a SAN or other mount) vs GlusterFS.
- name: "{{ wiki_id }} - Check if wiki's uploads dir exists ON APP SERVER"
  stat:
    path: "{{ m_uploads_dir }}/{{ wiki_id }}"
  register: uploads_dir
# Either way (existing backup or no, existing uploads or no) make sure uploads
# dir is configured
- name: "{{ wiki_id }} - Ensure uploads dir configured"
  file:
    path: "{{ m_uploads_dir }}/{{ wiki_id }}"
    state: directory
    mode: "{{ m_uploads_dir_mode }}"
    owner: "{{ m_uploads_dir_owner }}"
    # owner: "alt-meza-ansible"
    group: "{{ m_uploads_dir_group }}"

- name: "{{ wiki_id }} - Set fact if wiki {{ wiki_id }} DOES HAVE uploads"
  set_fact:
    wiki_has_uploads: True
  when: uploads_dir.stat.exists

- name: "{{ wiki_id }} - Set fact if wiki {{ wiki_id }} DOES NOT HAVE uploads"
  set_fact:
    wiki_has_uploads: False
  when: not uploads_dir.stat.exists



#
# Determine uploads server and required variables
#
- name: "{{ wiki_id }} - Mark uploads_backup_server_set as NOT SET yet"
  set_fact:
    uploads_backup_server_set: False

- name: "{{ wiki_id }} - Set uploads-source-from-backup facts IF SOURCING FROM backup-src"
  set_fact:
    uploads_backup_server: "{{ backups_server_alt_source.addr }}"
    uploads_backup_dir_path: "{{ backups_server_alt_source.uploads_dir_path | regex_replace('<id>', wiki_id) }}"
    uploads_backup_server_remote_user: "{{ backups_server_alt_source.remote_user }}"
    uploads_backup_server_set: True
  when: "backups_server_alt_source is defined"

- name: "{{ wiki_id }} - Set uploads-source-from-backup facts IF SOURCING FROM backup-servers"
  set_fact:
    uploads_backup_server: "{{ groups['backup-servers'][0] }}"
    uploads_backup_dir_path: "{{ m_backups }}/{{ env }}/{{ wiki_id }}/uploads"
    uploads_backup_server_set: True
  when: "not uploads_backup_server_set and 'backup-servers' in groups and groups['backup-servers']|length|int > 0"


#
# Set remote user to access uploads backup if not set above
#
- name: "{{ wiki_id }} - Set fact for uploads backup server remote user TO DEFAULT meza-ansible"
  set_fact:
    uploads_backup_server_remote_user: "meza-ansible"
  when:
    uploads_backup_server_remote_user is not defined



# WHEN: do_sql_dump is True
# Get home directory for {{db_backup_server_remote_user}}@{{sql_backup_server}}
- name: "Get {{ uploads_backup_server_remote_user }} home directory on {{ uploads_backup_server }}"
  shell: "getent passwd '{{ uploads_backup_server_remote_user }}' | cut -d: -f6"
  register: uploads_remote_user_home_dir
  delegate_to: "{{ uploads_backup_server }}"
  remote_user: "{{ uploads_backup_server_remote_user }}"
  run_once: true

- name: TEMPORARY DEBUG uploads_remote_user_home_dir
  debug: { var: uploads_remote_user_home_dir }

- name: "Set uploads_remote_user_home_dir fact"
  set_fact:
    uploads_remote_user_home_dir: "{{ uploads_remote_user_home_dir.stdout }}"

- name: "{{ wiki_id }} - Check if wiki's uploads backup dir exists on backups.0"
  stat:
    path: "{{ uploads_backup_dir_path }}"
  register: images_backup_dir
  delegate_to: "{{ uploads_backup_server }}"
  remote_user: "{{ uploads_backup_server_remote_user }}"
  run_once: true



#
# Check if uploads backups exist on defined server
#
- name: "{{ wiki_id }} - Check if wiki's uploads backup dir exists on backups.0"
  stat:
    path: "{{ uploads_backup_dir_path }}"
  register: images_backup_dir
  delegate_to: "{{ uploads_backup_server }}"
  remote_user: "{{ uploads_backup_server_remote_user }}"
  run_once: true



#
# Set facts to clarify if overwriting data should actually occur
#
- name: "{{ wiki_id }} - Set fact if SHOULD overwrite uploads data (only possible if backup exists)"
  set_fact:
    do_overwrite_uploads_from_backup: True
  when: intend_overwrite_from_backup and images_backup_dir.stat.exists

- name: "{{ wiki_id }} - Set fact if SHOULD NOT overwrite uploads data"
  set_fact:
    do_overwrite_uploads_from_backup: False
  when: not intend_overwrite_from_backup or not images_backup_dir.stat.exists


#
# Do the rsync transfer of files
#
- name: "{{ wiki_id }} - Rsync uploads directory"
  include_role:
    name: rsync
  vars:
    pulling_to_server:   "{{ inventory_hostname }}"
    pulling_to_path:     "{{ m_uploads_dir }}/{{ wiki_id }}"
    pulling_from_server: "{{ uploads_backup_server }}"
    pulling_from_path:   "{{ uploads_backup_dir_path }}/"
    pulling_from_user:   "{{ uploads_backup_server_remote_user }}"
  run_once: true
  when:
    images_backup_dir.stat.exists
    and (not wiki_has_uploads or do_overwrite_uploads_from_backup)


# Either way (existing backup or no) make sure uploads dir is configured
- name: "{{ wiki_id }} - Ensure wiki's uploads dir is still configured properly"
  file:
    path: "{{ m_uploads_dir }}/{{ wiki_id }}"
    state: directory
    mode: "{{ m_uploads_dir_mode }}"
    owner: "{{ m_uploads_dir_owner }}"
    group: "{{ m_uploads_dir_group }}"
    # recursive?




#
#
# Do database and search index updates as required
#
#

# Whether a new wiki was created or something was imported, run db update
- name: "{{ wiki_id }} - Update database"
  include_role:
    name: update.php
  when: not wiki_exists or do_overwrite_db_from_backup


- name: "{{ wiki_id }} - Include init-wiki.yml only when a new wiki created (but not imported)"
  include: init-wiki.yml
  when: not wiki_exists and not sql_file_exists

- name: "{{ wiki_id }} - Create list of new wikis if not exist"
  set_fact:
    list_of_new_wikis: []
  when: list_of_new_wikis is not defined

# Create a list of wikis that are "new" (either actually new, or that the
# database has been rebuilt)
- name: "{{ wiki_id }} - Update list of new wikis"
  set_fact:
    list_of_new_wikis: "{{ list_of_new_wikis }} + [ '{{ wiki_id }}' ]"
  when: not wiki_exists or do_overwrite_db_from_backup

